// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashmariadbs.v1.yaml
// installer.stash.appscode.com_stashmariadbs.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashmariadbsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\x23\x35\x10\xbd\xe7\x57\x94\xc4\x61\x2f\xa4\xa3\x11\x08\xa1\xbe\xc1\x2c\x87\x15\x2c\xa0\xcd\x6a\xef\x15\xbb\xd2\x29\xc6\x6d\x9b\xaa\x72\x60\xf8\xf5\xc8\xee\xce\x4c\xbe\x26\xb0\x23\xf0\x29\xae\x8f\xe7\xaa\xf7\xca\xee\x60\xe6\x4f\x24\xca\x29\xf6\x80\x99\xe9\x4f\xa3\x58\x77\xda\x3d\x7c\xab\x1d\xa7\xd5\xfe\x6e\xf1\xc0\xd1\xf7\x70\x5f\xd4\xd2\xf8\x81\x34\x15\x71\xf4\x96\xb6\x1c\xd9\x38\xc5\xc5\x48\x86\x1e\x0d\xfb\x05\x80\x13\xc2\x6a\xfc\xc8\x23\xa9\xe1\x98\x7b\x88\x25\x84\x05\x40\xc0\x0d\x05\xad\x31\x00\x98\x73\x0f\x6a\xa8\xbb\x05\x40\xc4\x91\xe6\xdd\x88\xc2\xe8\x37\xda\x71\x54\xc3\x10\x48\xba\x66\xef\x30\x67\x75\xc9\x53\xe7\xd2\xb8\xd0\x4c\xae\xe2\x0c\x92\x4a\xee\xe1\x66\xec\x04\x3f\x1f\xeb\xd0\x68\x48\xc2\x87\xfd\xf2\xa9\x86\xfa\xfb\x90\xd7\xb6\x53\xcb\xeb\xea\x7e\x5f\x8b\x7a\xfb\x7d\x33\x07\x56\xfb\xf1\xc2\xf5\x13\xab\x35\x77\x0e\x45\x30\x9c\x35\xd3\x3c\xca\x71\x28\x01\xe5\xd4\xb7\x00\x50\x97\x32\xf5\xf0\x73\xad\x32\xa3\x23\xbf\x00\xd8\x4f\x82\xb4\x2a\x97\x33\x3f\xfb\x3b\x0c\x79\x87\x77\x13\x9a\xdb\xd1\x88\x53\x13\x00\x29\x53\xfc\xee\xd7\x77\x9f\xbe\x5a\x9f\x98\x01\xb2\xa4\x4c\x62\x4f\xfd\x4e\xeb\x48\xf1\x23\x2b\x80\x27\x75\xc2\xd9\xda\x28\xbc\xa9\x80\x53\x14\xf8\x2a\x35\x29\xd8\x8e\x0e\xa5\x91\x9f\x6b\x80\xb4\x05\xdb\xb1\x82\x50\x16\x52\x8a\xd6\xe4\x3f\x01\x86\x1a\x84\x11\xd2\xe6\x37\x72\xd6\xc1\x9a\xa4\xc2\x80\xee\x52\x09\x1e\x5c\x8a\x7b\x12\x03\x21\x97\x86\xc8\x7f\x3d\x61\x2b\x58\x6a\x87\x06\x34\x9a\x19\x7e\x5e\x1c\x8d\x24\x62\x80\x3d\x86\x42\x5f\x02\x46\x0f\x23\x3e\x82\x50\x3d\x05\x4a\x3c\xc2\x6b\x21\xda\xc1\xfb\x24\x04\x1c\xb7\xa9\x87\x9d\x59\xd6\x7e\xb5\x1a\xd8\x0e\x93\xee\xd2\x38\x96\xc8\xf6\xb8\x72\x29\x9a\xf0\xa6\x58\x12\x5d\x79\xda\x53\x58\x29\x0f\x4b\x14\xb7\x63\x23\x67\x45\x68\x85\x99\x97\xad\xf4\x68\xed\xba\x8c\xfe\x0b\x99\xef\x86\xbe\x39\xa9\xd5\x1e\x73\x1b\x70\xe1\x38\x1c\x39\xda\x88\xdd\x50\xa0\xce\x19\xb0\x02\xce\xa9\x53\x17\xcf\x44\x57\x53\x65\xe7\xc3\x0f\xeb\x8f\x70\x38\xba\x89\x71\xce\x7e\xe3\xfd\x39\x51\x9f\x25\xa8\x84\x71\xdc\x92\x4c\x22\x6e\x25\x8d\x0d\x93\xa2\xcf\x89\xa3\xb5\x8d\x0b\x4c\xf1\x9c\x7e\x2d\x9b\x91\xad\xea\xfe\x7b\x21\xb5\xaa\x55\x07\xf7\x18\x63\x32\xd8\x10\x94\xec\xd1\xc8\x77\xf0\x2e\xc2\x3d\x8e\x14\xee\x51\xe9\x7f\x17\xa0\x32\xad\xcb\x4a\xec\xbf\x93\xe0\xf8\xe5\x3a\x0f\x9e\x58\x3b\x72\x1c\x9e\x9d\x17\xf4\x3a\x7e\x10\xd6\x99\x5c\x95\xae\xb2\x37\xdf\x93\x6d\x92\x29\x04\xe6\x98\x79\x28\x61\xcb\x81\x4e\x50\xaf\xdf\xda\xba\x36\xe8\x1e\x4a\x3e\xb7\xde\xca\xa8\x0b\x65\xb8\x6a\x7f\x91\x95\x9b\x2c\xd4\xb5\x2d\x21\xd4\x57\xe9\x97\x3d\x89\xb0\xa7\x4b\xf4\x1b\xc8\x3c\xe2\x70\x25\xe3\x76\x0f\x42\x03\xab\xc9\xe3\x2b\xfa\xa8\xc9\x39\x29\x5b\x7a\x65\xba\xe1\xf0\x8a\xbc\x7a\x2f\x58\xc8\x5f\xa6\x2e\x9f\xba\xb9\xea\x3a\xd4\x7a\xc5\x69\xf8\x59\x32\xbd\x5a\x22\x21\xb5\x24\x9f\x2d\xd2\x7f\x3f\x68\x7f\x20\x5b\xfd\x27\x91\x8a\x5d\x02\x6f\x93\x8c\x68\xf5\xfb\x6f\xdf\x7c\xfd\x02\x6a\xfd\x48\x0c\x24\x8b\xd3\xee\xae\x29\xb3\x9c\x6f\xd7\x99\xb1\x4d\xeb\x99\x6d\xa6\xe7\xcc\x7a\x54\xeb\x3f\xbf\x26\x17\x46\xad\x0f\xb2\xef\xc1\xa4\x4c\xc0\xf5\x88\x7a\x51\x26\xcb\xdf\x01\x00\x00\xff\xff\x67\x11\x6a\xd0\xa6\x09\x00\x00")

func installerStashAppscodeCom_stashmariadbsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmariadbsV1Yaml,
		"installer.stash.appscode.com_stashmariadbs.v1.yaml",
	)
}

func installerStashAppscodeCom_stashmariadbsV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmariadbsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmariadbs.v1.yaml", size: 2470, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashmariadbsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xd1\x8f\x1b\xc5\x0f\x7e\xcf\x5f\x61\xe9\xf7\x93\x0a\x88\x4d\x38\x15\x55\xb0\x2f\x08\xae\x20\x55\xb4\x80\x7a\xa5\x2f\xa7\x22\x39\x33\xce\xc6\xdc\xec\xcc\x60\x7b\xd3\xde\xfd\xf5\x68\x66\x37\xb9\x24\x97\x3b\x7a\x15\xcc\x53\xe6\xb3\xc7\xf3\xf9\xb3\xbd\x19\xcc\xfc\x96\x44\x39\xc5\x16\x30\x33\x7d\x30\x8a\x65\xa7\xf3\xab\x6f\x74\xce\x69\xb1\x39\x5b\x92\xe1\xd9\xec\x8a\xa3\x6f\xe1\x7c\x50\x4b\xfd\x6b\xd2\x34\x88\xa3\xe7\xb4\xe2\xc8\xc6\x29\xce\x7a\x32\xf4\x68\xd8\xce\x00\x9c\x10\x16\xf0\x0d\xf7\xa4\x86\x7d\x6e\x21\x0e\x21\xcc\x00\x02\x2e\x29\x68\xf1\x01\xc0\x9c\x5b\x50\x43\x5d\xcf\x00\x22\xf6\x34\xed\x7a\x14\x46\xbf\xd4\x39\x47\x35\x0c\x81\x64\x5e\xf1\x39\xe6\xac\x2e\x79\x9a\xbb\xd4\xcf\x34\x93\x2b\x71\x3a\x49\x43\x6e\xe1\x41\xdf\x31\xfc\x74\xad\x43\xa3\x2e\x09\x6f\xf7\xcd\x8e\x43\xf9\xbd\x3d\x57\xb7\x63\xca\x17\xc5\xfc\xaa\x90\x7a\xfe\x43\x85\x03\xab\xfd\x7c\xc7\xf4\x92\xd5\xaa\x39\x87\x41\x30\x1c\x25\x53\x2d\xca\xb1\x1b\x02\xca\xa1\x6d\x06\x90\x85\x94\x64\x43\xbf\xc7\xab\x98\xde\xc7\x9f\x98\x82\xd7\x16\x56\x18\xb4\x30\x51\x97\x32\xb5\xf0\x4b\x49\x22\xa3\x23\x3f\x03\xd8\x60\x60\x5f\x55\x1e\xd3\x48\x99\xe2\xf7\xbf\xbd\x78\xfb\xf4\xc2\xad\xa9\xc7\x11\x2c\x91\x53\x26\xb1\x5d\xb6\xa3\xf0\xbb\x92\xef\x30\x00\x4f\xea\x84\x73\x8d\x08\x4f\x4a\xa8\xd1\x07\x7c\x29\x32\x29\xd8\x9a\x60\x33\x62\xe4\x41\xeb\x35\x90\x56\x60\x6b\x56\x10\xaa\x39\x44\xab\x94\xf6\xc2\x42\x71\xc1\x08\x69\xf9\x27\x39\x9b\xc3\x45\xc9\x53\x14\x74\x9d\x86\xe0\xc1\xa5\xb8\x21\x31\x10\x72\xa9\x8b\x7c\xb3\x8b\xac\x60\xa9\x5e\x19\xd0\x68\x52\x76\xbb\x38\x1a\x49\xc4\x50\x44\x18\xe8\x4b\xc0\xe8\xa1\xc7\x6b\x10\x2a\x77\xc0\x10\xf7\xa2\x55\x17\x9d\xc3\xab\x24\x04\x1c\x57\xa9\x85\xb5\x59\xd6\x76\xb1\xe8\xd8\xb6\x4d\xee\x52\xdf\x0f\x91\xed\x7a\xe1\x52\x34\xe1\xe5\x60\x49\x74\xe1\x69\x43\x61\xa1\xdc\x35\x28\x6e\xcd\x46\xce\x06\xa1\x05\x66\x6e\x2a\xf1\x68\x75\x52\x7a\xff\x3f\x99\x26\x42\x9f\xec\x31\xb5\xeb\x5c\x9b\x5a\x38\x76\x3b\xb8\x36\xd5\xbd\xba\x97\xbe\x02\x56\xc0\xe9\xd8\xc8\xff\x56\xde\x02\x15\x55\x5e\xff\x78\xf1\x06\xb6\x97\xd6\x12\x1c\x6a\x5e\xd5\xbe\x3d\xa6\xb7\xc2\x17\xa1\x38\xae\x48\xc6\xc2\xad\x24\xf5\x35\x22\x45\x9f\x13\x47\xab\x1b\x17\x98\xe2\xa1\xe8\x3a\x2c\x7b\xb6\x52\xe9\xbf\x06\x52\x2b\xf5\x99\xc3\x39\xc6\x98\x0c\x96\x04\x43\xf6\x68\xe4\xe7\xf0\x22\xc2\x39\xf6\x14\xce\x51\xe9\x3f\x97\xbd\x28\xac\x4d\x91\xf4\x9f\x85\xdf\xff\x42\x6d\xd7\xa9\xf1\x28\xab\x7e\x8e\x0e\x10\x80\x1e\x3f\xbc\xa4\xd8\xd9\xba\x85\x67\x4f\x8f\x6c\x19\xad\xb4\x64\x0b\x7f\x5c\x62\x73\xf3\xee\xb3\xcb\x06\x9b\x9b\xaf\x9a\x6f\xdf\x7d\x71\x39\xfd\xf8\xfc\xbb\xff\x1f\x9d\x39\x49\x72\x0b\x8f\x05\xdc\xc1\xdb\xaf\xdd\xc9\xa6\xd9\xff\x0a\x5d\x64\x72\xa5\x7f\x4a\x11\xa7\x11\x5d\x25\x19\x5d\x60\xf2\x99\x66\x02\x56\x1c\xe8\x23\xb4\x58\xa2\xbb\x1a\xf2\xb1\x1a\xf7\x79\x97\x85\xd2\x9d\x40\xef\xcd\xf8\xde\xac\xcb\x5a\x0d\x21\x94\x6a\xfc\xba\x21\x11\xf6\x77\xaa\x72\x6f\x4c\xee\xb1\xbb\xe3\xfd\x10\x6b\xa1\x8e\xd5\xe4\xfa\x91\xcc\xcb\xc1\x9c\x94\x2d\x7d\xc2\x51\xc3\xee\x91\x67\xca\xf8\xb1\x90\x3f\x3e\xd6\xec\xf8\x9f\x30\x6c\xf9\xdd\x31\x19\x7e\x74\x21\x3e\xa9\x08\x42\x6a\x49\x1e\x55\x86\x7f\xb3\x79\xde\x23\x5b\x79\x84\xa4\xc1\x8e\x43\xae\x92\xf4\x68\xe5\xe1\x60\xcf\xbe\x3e\x19\xaf\xfc\xcb\x74\x24\xb3\xfd\x6c\xee\x6a\xdf\x4c\xf3\x71\x00\xd5\xde\x3b\x40\x26\x21\x0e\xb0\x3d\x76\x0f\xcf\xff\x11\xb4\xd9\xbe\xd7\x36\x67\x18\xf2\x1a\xcf\x6e\xb1\xaa\x5c\x33\xbd\xa6\xf6\xcc\x00\xf5\x7d\xe1\x5b\x30\x19\x46\x16\x85\x4f\x99\x90\x11\xf9\x3b\x00\x00\xff\xff\x64\x8a\x56\x33\x07\x0a\x00\x00")

func installerStashAppscodeCom_stashmariadbsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashmariadbsYaml,
		"installer.stash.appscode.com_stashmariadbs.yaml",
	)
}

func installerStashAppscodeCom_stashmariadbsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashmariadbsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashmariadbs.yaml", size: 2567, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashmariadbs.v1.yaml": installerStashAppscodeCom_stashmariadbsV1Yaml,
	"installer.stash.appscode.com_stashmariadbs.yaml":    installerStashAppscodeCom_stashmariadbsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashmariadbs.v1.yaml": {installerStashAppscodeCom_stashmariadbsV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashmariadbs.yaml":    {installerStashAppscodeCom_stashmariadbsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
